policy_module(qemu)

########################################
#
# Declarations
#

## <desc>
##	<p>
##	Determine whether qemu has full
##	access to the network.
##	</p>
## </desc>
gen_tunable(qemu_full_network, false)

## <desc>
##	<p>
##	Determine whether qemu can be
##	managed by incus.
##	</p>
## </desc>
gen_tunable(qemu_incus_managed, false)

attribute_role qemu_roles;
roleattribute system_r qemu_roles;

type qemu_exec_t;
application_executable_file(qemu_exec_t)

type qemu_runtime_t alias qemu_var_run_t;
files_runtime_file(qemu_runtime_t)

virt_domain_template(qemu)
role qemu_roles types qemu_t;

type qemu_unit_t;
init_unit_file(qemu_unit_t)

########################################
#
# Local policy
#

dev_read_sysfs(qemu_t)

allow qemu_t qemu_runtime_t:sock_file create_sock_file_perms;
files_runtime_filetrans(qemu_t, qemu_runtime_t, sock_file)

tunable_policy(`qemu_full_network',`
	corenet_udp_sendrecv_generic_if(qemu_t)
	corenet_udp_sendrecv_generic_node(qemu_t)
	corenet_udp_bind_generic_node(qemu_t)
	corenet_udp_bind_all_ports(qemu_t)
	corenet_tcp_bind_all_ports(qemu_t)
	corenet_tcp_connect_all_ports(qemu_t)
')

optional_policy(`
	tunable_policy(`qemu_incus_managed',`
		incusd_stream_connect(qemu_t)

		files_create_generic_tmp_sockets(qemu_t)

		kernel_read_kernel_sysctls(qemu_t)
		kernel_read_vm_overcommit_sysctl(qemu_t)

		# incus VMs wont start otherwise
		allow qemu_t self:capability { dac_override dac_read_search setuid setgid };
		allow qemu_t qemu_tmpfs_t:file map;

		# this is due to incus lack of selinux support for VMs
		kernel_rw_unlabeled_files(qemu_t)
		kernel_rw_unlabeled_dirs(qemu_t)
		kernel_manage_unlabeled_symlinks(qemu_t)

		container_manage_engine_tmp_files(qemu_t)
		container_manage_log_files(qemu_t)
		container_manage_runtime_files(qemu_t)
		container_manage_runtime_sock_files(qemu_t)
	')
	storage_raw_read_fixed_disk_cond(qemu_t, qemu_incus_managed)
	storage_raw_write_fixed_disk_cond(qemu_t, qemu_incus_managed)
')

optional_policy(`
	fs_manage_xenfs_files(qemu_t)

	dev_rw_xen(qemu_t)

	xen_stream_connect_xenstore(qemu_t)
	xen_append_log(qemu_t)
	xen_runtime_filetrans(qemu_t, qemu_runtime_t, sock_file)
')

optional_policy(`
	xserver_user_x_domain_template(qemu, qemu_t, qemu_tmpfs_t)
')

########################################
#
# Unconfined local policy
#

optional_policy(`
	type unconfined_qemu_t;
	application_type(unconfined_qemu_t)
	unconfined_domain(unconfined_qemu_t)

	allow unconfined_qemu_t self:process { execmem execstack };
	allow unconfined_qemu_t qemu_exec_t:file execmod;
')

ifdef(`distro_gentoo',`

	#################################
	#
	# Local policy
	#

	# VNC/GDB support
	allow qemu_t self:tcp_socket create_stream_socket_perms;
	allow qemu_t self:udp_socket create_socket_perms;

	# Network related socket
	allow qemu_t qemu_runtime_t:sock_file manage_sock_file_perms;

	files_runtime_filetrans(qemu_t, qemu_runtime_t, sock_file)

	optional_policy(`
		vde_connect(qemu_t)
	')

	#################################
	#
	# QEMU Guest Agent policy
	#
	type qemu_ga_t;
	type qemu_ga_exec_t;
	init_system_domain(qemu_ga_t, qemu_ga_exec_t)

	type qemu_ga_log_t;
	logging_log_file(qemu_ga_log_t)

	type qemu_ga_run_t;
	files_runtime_file(qemu_ga_run_t)

	allow qemu_ga_t self:capability sys_admin;
	allow qemu_ga_t self:unix_dgram_socket create_socket_perms;

	manage_dirs_pattern(qemu_ga_t, qemu_ga_log_t, qemu_ga_log_t)
	append_files_pattern(qemu_ga_t, qemu_ga_log_t, qemu_ga_log_t)
	create_files_pattern(qemu_ga_t, qemu_ga_log_t, qemu_ga_log_t)
	setattr_files_pattern(qemu_ga_t, qemu_ga_log_t, qemu_ga_log_t)
	logging_log_filetrans(qemu_ga_t, qemu_ga_log_t, { dir file })

	allow qemu_ga_t qemu_ga_run_t:file manage_file_perms;
	files_runtime_filetrans(qemu_ga_t, qemu_ga_run_t, file)

	corecmd_exec_bin(qemu_ga_t)
	corecmd_exec_shell(qemu_ga_t)

	miscfiles_read_localization(qemu_ga_t)

	userdom_use_user_terminals(qemu_ga_t)

	term_use_virtio_console(qemu_ga_t)
')
